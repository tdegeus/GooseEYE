language: cpp
dist: trusty
env:
matrix:
  fast_finish: true
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
            - python3
      env: COMPILER=gcc GCC=5
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - python3
      env: COMPILER=gcc GCC=6
env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - sudo apt-get -qq update
    - sudo apt-get install -y texlive-base texlive-latex-base texlive-latex-extra texlive-fonts-recommended texlive-fonts-extra
    - sudo apt-get install dvipng
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi
install:
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:${PATH}"
    - export INCLUDE_PATH="$HOME/miniconda/include:${INCLUDE_PATH}"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda install cmake -c conda-forge
    - conda install xtl -c conda-forge
    - conda install xsimd -c conda-forge
    - conda install xtensor -c conda-forge
    - pip install numpy matplotlib GooseMPL pybind11 pyxtensor
    - export MPLBACKEND=Agg
    - python -c "import GooseMPL; GooseMPL.copy_style()"
    # store relevant
    - root_dir="${PWD}"
    - build_dir="${PWD}/build"
    # make Python library
    - cd "${root_dir}"
    - python3 setup.py build
    - python3 setup.py install
    # build path
    - cd "${root_dir}"
    - rm -r "${build_dir}"
    - mkdir "${build_dir}"
    - cd "${build_dir}"
    # install catch
    - git clone https://github.com/catchorg/Catch2.git
    - cd Catch2
    - mkdir build
    - cd build
    - mkdir opt
    - cmake .. -DCATCH_BUILD_TESTING=OFF
    - sudo make install
    # make test-cases
    - cd "${build_dir}"
    - cmake ..
    - sudo make install
    - cmake .. -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON
    - make
    # make examples
    - g++ -std=c++14 docs/examples/S2.cpp -o docs/examples/S2
    - g++ -std=c++14 docs/examples/S2_autocorrelation.cpp -o docs/examples/S2_autocorrelation
    - g++ -std=c++14 docs/examples/S2_ensemble.cpp -o docs/examples/S2_ensemble
    - g++ -std=c++14 docs/examples/S2_mask.cpp -o docs/examples/S2_mask
    - g++ -std=c++14 docs/examples/C2.cpp -o docs/examples/C2
    - g++ -std=c++14 docs/examples/heightheight.cpp -o docs/examples/heightheight
script:
    # run tests
    - cd "${build_dir}/test"
    - ./test
    # run examples
    - cd "${build_dir}/docs/examples"
    - ./S2
    - ./S2_autocorrelation
    - ./S2_mask
    - ./S2_ensemble
    - ./C2
    - ./heightheight
    # run examples
    - cd "${root_dir}"
    - python docs/examples/S2.py
    - python docs/examples/S2_autocorrelation.py
    - python docs/examples/S2_mask.py
    - python docs/examples/S2_ensemble.py
    - python docs/examples/C2.py
    - python docs/examples/W2.py
#     - python docs/examples/L.py
#     - python docs/examples/W2c.py
    - python docs/examples/clusters.py
    - python docs/examples/clusters_centers.py
#     - python docs/examples/clusters_dilate.py
    - python docs/examples/heightheight.py
    - python docs/examples/mean.py
#     - python docs/examples/pixel_path.py
