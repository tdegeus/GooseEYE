language: cpp
dist: xenial
env:
matrix:
  fast_finish: true
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env: COMPILER=gcc GCC=5 RUN_EXAMLES="false"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6 RUN_EXAMLES="false"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 RUN_EXAMLES="true"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-6.0
          packages:
            - clang-6.0
      env: COMPILER=clang CLANG=6.0 RUN_EXAMLES="false"
    - os: osx
      osx_image: xcode8
      compiler: clang
      env: RUN_EXAMLES="false"
    - os: osx
      osx_image: xcode9
      compiler: clang
      env: RUN_EXAMLES="true"
env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi
install:
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        cat /proc/cpuinfo;
        ldd --version;
      fi
    # Set environment using Conda
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda install -c conda-forge cmake
    - conda install -c conda-forge xsimd
    - conda install -c conda-forge xtensor
    - conda install -c conda-forge python
    - conda install -c conda-forge numpy
    - conda install -c conda-forge pyxtensor
    - conda install -c conda-forge catch2
    # Build/install the library
    - cmake . -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON
    - make
    - sudo make install
    - python setup.py build
    - python setup.py install
script:
    # Run tests
    - ./test/main
    # Run C++ examples
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/S2; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/S2_autocorrelation; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/S2_mask; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/S2_ensemble; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/C2; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/L; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/W2; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/W2c; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/clusters; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/clusters_centers; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/clusters_dilate; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/heightheight; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; then ./docs/examples/mean; fi
    # Run Python examples
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/S2.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/S2_autocorrelation.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/S2_mask.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/S2_ensemble.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/C2.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/L.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/W2.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/W2c.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/clusters.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/clusters_centers.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/clusters_dilate.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/heightheight.py --check; fi
    - if [ "$RUN_EXAMPLES" -eq "true" ]; python docs/examples/mean.py --check; fi
