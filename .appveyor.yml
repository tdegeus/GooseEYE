build: false

branches:
  only:
    - master

platform:
  - x64

image:
  - Visual Studio 2017
  - Visual Studio 2015

environment:
  matrix:
    - MINICONDA: C:\myname-conda

init:
  - set RUN_EXAMPLES="false"
  - "ECHO %MINICONDA%"
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%" == "Visual Studio 2015" set VCVARPATH="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat"
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%" == "Visual Studio 2015" set VCARGUMENT=%PLATFORM%
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%" == "Visual Studio 2017" set VCVARPATH="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - echo "%VCVARPATH% %VCARGUMENT%"
  - "%VCVARPATH% %VCARGUMENT%"
  - ps: if($env:Platform -eq "x64"){Start-FileDownload 'http://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe' C:\Miniconda.exe; echo "Done"}
  - ps: if($env:Platform -eq "x86"){Start-FileDownload 'http://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86.exe' C:\Miniconda.exe; echo "Done"}
  - cmd: C:\Miniconda.exe /S /D=C:\myname-conda
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%MINICONDA%\\Library\\bin;%PATH%"

install:
  # Set environment using Conda
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - conda install -c conda-forge cmake
  - conda install -c conda-forge xsimd
  - conda install -c conda-forge xtensor
  - conda install -c conda-forge python
  - conda install -c conda-forge numpy
  - conda install -c conda-forge pyxtensor
  - conda install -c conda-forge catch2
  # Build/install the library
  - cmake -G "NMake Makefiles" -DCMAKE_INSTALL_PREFIX=%MINICONDA%\\LIBRARY -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON .
  - nmake
  - nmake install
  - python setup.py build
  - python setup.py install

build_script:
  # Run tests
  - .\test\main
  # Run C++ examples
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\S2}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\S2_autocorrelation}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\S2_mask}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\S2_ensemble}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\C2}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\L}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\W2}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\W2c}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\clusters}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\clusters_centers}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\clusters_dilate}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\heightheight}
  - if("%RUN_EXMAPLES" -eq "true"){.\docs\examples\mean}
  # Run Python examples
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\S2.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\S2_autocorrelation.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\S2_mask.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\S2_ensemble.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\C2.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\L.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\W2.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\W2c.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\clusters.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\clusters_centers.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\clusters_dilate.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\heightheight.py --check}
  - if("%RUN_EXMAPLES" -eq "true"){python docs\examples\mean.py --check}
